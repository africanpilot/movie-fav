services:
  ###################
  # Database
  ###################
  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    restart: always
    volumes:
      - postgres_secmsdb_prod:/var/lib/postgresql/data:delegated
      - ./microservices/apps/postgres/postgres.conf:/etc/postgresql/postgresql.conf
      - ./microservices/apps/postgres/prod/data:/data
      - ./microservices/apps/postgres/prod/create_all_db.sql:/docker-entrypoint-initdb.d/001-create_all_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE_INIT}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      APP_DEFAULT_ENV: prod
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE_INIT}
    env_file:
      - .prod.env
    ports:
      - "5432:5432"
    networks:
      - secms

  pgadmin:
    image: dpage/pgadmin4
    hostname: pgadmin
    container_name: pgadmin
    restart: always
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "5050:80"
    networks:
      - secms

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    volumes:
      - rabbitmq_secmsdb_prod:/var/lib/rabbitmq/
      - rabbitmq_secmsdb_prod:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    env_file:
      - .prod.env
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - secms

  redis:
    image: redis:6.2-alpine
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf --save 20 1 --loglevel warning --requirepass ${DB_REDIS_PASSWORD}
    volumes:
      - "./microservices/apps/redis/redis.conf:/usr/local/etc/redis/redis.conf"
      - redis_secmsdb_prod:/usr/local/etc/redis/data:delegated
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    networks:
      - secms

  selenium:
    # image: selenium/standalone-chrome
    image: seleniarm/standalone-chromium
    hostname: selenium
    container_name: selenium
    restart: always
    environment:
      - DOCKER_DEFAULT_PLATFORM=linux/amd64
      - GRID_MAX_SESSION=20
      - SE_NODE_MAX_SESSIONS=20
      - SE_NODE_OVERRIDE_MAX_SESSIONS=true
      - VNC_NO_PASSWORD=1
    ports:
      - "4013:4444"
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - secms

  ###################
  # Monitoring
  ###################
  flower:
    image: mher/flower
    hostname: flower
    container_name: flower
    restart: always
    entrypoint: ["celery", "--broker=${APP_CELERY_BROKER}", "flower"]
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      FLOWER_PORT: 5566
    env_file:
      - .prod.env
    ports:
      - "5566:5566"
    networks:
      - secms

  ###################
  # Nginx Routing
  ###################
  nginx:
    image: docker.io/makurichard/monxt:nginx
    hostname: nginx
    container_name: nginx
    platform: linux/amd64
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: nginx-production
    restart: "on-failure"
    volumes:
      - ./microservices/apps/nginx/conf/monxt:/etc/nginx/conf/monxt
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "80:80"
      - "443:443"
    networks:
      - secms

  ###################
  # Apollo Gateway
  ###################
  apollo:
    image: docker.io/makurichard/monxt:apollo
    hostname: apollo
    container_name: apollo
    platform: linux/amd64
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: apollo-production
    entrypoint: npm run start-gateway-production
    restart: "on-failure"
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4000:4000"
      - "4001:4001"
    networks:
      - secms

  ########################################################
  # Microservices client
  ########################################################
  theater:
    image: docker.io/makurichard/monxt:theater
    hostname: theater
    container_name: theater
    platform: linux/amd64
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: theater-production
    entrypoint: node apps/theater/server.js
    restart: "on-failure"
    depends_on:
      nginx:
        condition: service_started
    env_file:
      - .prod.env
    ports:
      - "3007:3000"
    networks:
      - secms

  ########################################################
  # Microservices backend
  ########################################################
  account:
    image: docker.io/makurichard/monxt:monxt
    hostname: account
    container_name: account
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start account
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      account-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4002:8080"
    networks:
      - secms

  account-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: account-worker
    container_name: account-worker
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/account/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    networks:
      - secms

  monxt:
    image: docker.io/makurichard/monxt:monxt
    hostname: monxt
    container_name: monxt
    platform: linux/amd64
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start monxt
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      monxt-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
      GUNICORN_WORKERS: 4
    env_file:
      - .prod.env
    ports:
      - "4009:8080"
    networks:
      - secms

  monxt-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: monxt-worker
    container_name: monxt-worker
    platform: linux/amd64
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/monxt/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    networks:
      - secms

  movie:
    image: docker.io/makurichard/monxt:monxt
    hostname: movie
    container_name: movie
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start movie
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      movie-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4004:8080"
    networks:
      - secms

  movie-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: movie-worker
    container_name: movie-worker
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/movie/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: test
    env_file:
      - .prod.env
    networks:
      - secms

  notifications:
    image: docker.io/makurichard/monxt:monxt
    hostname: notifications
    container_name: notifications
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start notifications
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      notifications-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4005:8080"
    networks:
      - secms

  notifications-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: notifications-worker
    container_name: notifications-worker
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/notifications/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    networks:
      - secms

  person:
    image: docker.io/makurichard/monxt:monxt
    hostname: person
    container_name: person
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start person
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      person-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4006:8080"
    networks:
      - secms

  person-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: person-worker
    container_name: person-worker
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/person/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: test
    env_file:
      - .prod.env
    networks:
      - secms

  shows:
    image: docker.io/makurichard/monxt:monxt
    hostname: shows
    container_name: shows
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint: python3 start shows
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      shows-worker:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    ports:
      - "4007:8080"
    networks:
      - secms

  shows-worker:
    image: docker.io/makurichard/monxt:monxt
    hostname: shows-worker
    container_name: shows-worker
    build:
      context: ./microservices
      dockerfile: Dockerfile
      target: production
    entrypoint:
      [
        "celery",
        "--workdir",
        "/home/svc/microservices/apps/shows/src/app_lib",
        "-A",
        "worker",
        "worker",
        "-l",
        "INFO",
        "-E",
      ]
    restart: "on-failure"
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      APP_DEFAULT_ENV: prod
    env_file:
      - .prod.env
    networks:
      - secms

###################################################
# List of all networks needed
networks:
  secms:
    driver: bridge
volumes:
  postgres_secmsdb_prod:
  redis_secmsdb_prod:
  rabbitmq_secmsdb_prod:
