name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20"

jobs:
  test-python:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.4
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: microservices/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./microservices
        run: poetry install --no-interaction --no-root

      - name: Install project
        working-directory: ./microservices
        run: poetry install --no-interaction

      - name: Run pre-commit hooks
        working-directory: ./microservices
        run: |
          poetry run pre-commit run --all-files

      - name: Run tests with coverage
        working-directory: ./microservices
        env:
          APP_DEFAULT_ENV: test
        run: |
          poetry run coverage run -m pytest --benchmark-disable -x -s -vvvv
          poetry run coverage report --show-missing
          poetry run coverage xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./microservices/coverage.xml
          fail_ci_if_error: true

  test-node:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: microservices/yarn.lock

      - name: Install dependencies
        working-directory: ./microservices
        run: yarn install --frozen-lockfile

      - name: Run linting
        working-directory: ./microservices
        run: yarn lint

      - name: Run type checking
        working-directory: ./microservices
        run: yarn check-types

      - name: Build applications
        working-directory: ./microservices
        run: yarn build

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-python, test-node]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./microservices
          file: ./microservices/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: movie-fav:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
