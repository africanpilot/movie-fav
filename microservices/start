#!/usr/bin/python
# Copyright Â© 2025 by Richard Maku
# All Rights Reserved. Proprietary and confidential.

import argparse
import os
from typing import Optional

os.chdir(os.path.abspath(os.path.dirname(__file__)))


def change_dir(service_name: str, path: str):
    target_dir = "apps/" + service_name + path
    if not os.path.isdir(target_dir):
        print("No such service: " + service_name)
        exit(1)
    os.chdir(os.path.abspath(target_dir))


def run_migrations(microservices: Optional[list[str]] = None):
    ms = microservices if microservices else ["account", "notifications", "movie", "shows", "person"]
    for d in ms:
        os.system(f"cd /home/svc/microservices/apps/{d}/src/models/;alembic upgrade head")


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("app", type=str, help="specify the microservice to run")
    parser.add_argument("--api", action="store_true", help="Start the api server")
    parser.add_argument("--grpc", action="store_true", help="Start the grpc unary server")
    parser.add_argument("--celery", action="store_true", help="Start the celery worker")
    parser.add_argument("--migration", action="store_true", help="Execute migrations for the microservice")
    parser.add_argument("--allmigration", action="store_true", help="Execute all ms migrations")

    args = parser.parse_args()
    if not args.migration:
        change_dir(args.app, "/src/app_lib/")

    # Starts all services except celery
    if not args.api and not args.grpc and not args.celery and not args.migration and not args.allmigration:
        run_migrations()
        os.execlp("python", "python", "services.py")

    if args.api:
        run_migrations()
        os.execlp("python", "python", "app.py")

    if args.grpc:
        run_migrations()
        os.execlp("python", "python", "unary_server.py")

    if args.celery:
        run_migrations()
        os.execlp("python", "python", "worker.py")

    if args.migration:
        run_migrations([args.app])

    if args.allmigration:
        run_migrations()
